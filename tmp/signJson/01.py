#!/usr/bin/env python3 

import json
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

# Load the JSON file
def load_json(file_path):
    with open(file_path, 'r') as f:
        return f.read()

def sign_data(private_key_path, json_data, signature_path):
    # Load the private key (now in PEM format)
    with open(private_key_path, 'rb') as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,
            backend=default_backend()
        )
    
    # Sign the JSON data
    signature = private_key.sign(
        json_data.encode(),  # Data to sign
        padding.PKCS1v15(),
        hashes.SHA256()
    )
    
    # Save the signature to a file
    with open(signature_path, 'wb') as sig_file:
        sig_file.write(signature)


if __name__ == "__main__":
    # Define file paths
    json_file = "output.json"
    private_key_file = "mykey"  # Path to private key generated by ssh-keygen
    signature_file = "data.sig"

    # Load JSON file
    json_content = load_json(json_file)
    
    # Sign the JSON data
    sign_data(private_key_file, json_content, signature_file)
    print(f"Signature created and saved to {signature_file}")
